{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\Ve Meet TEST - 3\\\\client\\\\src\\\\components\\\\GuestRoom.js\",\n  _s = $RefreshSig$();\n// Cleaned GuestRoom.js with working fullscreen screen share block\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport \"./GuestRoom.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SERVER_URL = process.env.REACT_APP_SERVER_URL || \"https://192.168.29.23:5000\";\nconst socket = io(SERVER_URL, {\n  secure: true,\n  reconnection: true,\n  rejectUnauthorized: false\n});\nconst GuestRoom = () => {\n  _s();\n  var _peers$find;\n  const [peers, setPeers] = useState([]);\n  const [participants, setParticipants] = useState([]);\n  const [userName, setUserName] = useState(\"\");\n  const [roomID, setRoomID] = useState(\"\");\n  const [micOn, setMicOn] = useState(true);\n  const [camOn, setCamOn] = useState(true);\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\n  const [screenSharerID, setScreenSharerID] = useState(null);\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n  const streamRef = useRef();\n  const videoRefs = useRef({});\n  const screenTrackRef = useRef();\n  useEffect(() => {\n    const name = prompt(\"Enter your name\");\n    const room = prompt(\"Enter room code\");\n    setUserName(name);\n    setRoomID(room);\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      streamRef.current = stream;\n      if (userVideo.current) {\n        userVideo.current.srcObject = stream;\n      }\n      socket.emit(\"join-room\", {\n        roomId: room,\n        userName: name\n      });\n      socket.on(\"all-users\", users => {\n        const newPeers = [];\n        users.forEach(user => {\n          if (user.id === socket.id) return;\n          const peer = createPeer(user.id, socket.id, stream);\n          peersRef.current.push({\n            peerID: user.id,\n            peer,\n            userName: user.name\n          });\n          newPeers.push({\n            peerID: user.id,\n            peer,\n            userName: user.name\n          });\n        });\n        setPeers(newPeers);\n        setParticipants(users.map(u => u.name));\n      });\n      socket.on(\"user-joined\", payload => {\n        const peer = addPeer(payload.signal, payload.id, payload.name, stream);\n        peersRef.current.push({\n          peerID: payload.id,\n          peer,\n          userName: payload.name\n        });\n        setPeers(users => [...users, {\n          peerID: payload.id,\n          peer,\n          userName: payload.name\n        }]);\n        setParticipants(list => {\n          if (!list.includes(payload.name)) return [...list, payload.name];\n          return list;\n        });\n      });\n      socket.on(\"receiving-returned-signal\", payload => {\n        const item = peersRef.current.find(p => p.peerID === payload.id);\n        if (item && item.peer) {\n          item.peer.signal(payload.signal);\n        }\n      });\n      socket.on(\"user-disconnected\", id => {\n        setPeers(users => users.filter(p => p.peerID !== id));\n        peersRef.current = peersRef.current.filter(p => p.peerID !== id);\n        setParticipants(peersRef.current.map(p => p.userName));\n        delete videoRefs.current[id];\n        if (screenSharerID === id) setScreenSharerID(null);\n      });\n    }).catch(err => {\n      console.error(\"Media Device Error:\", err);\n      alert(\"Could not access camera/microphone.\");\n    });\n    return () => {\n      socket.disconnect();\n      peersRef.current.forEach(({\n        peer\n      }) => peer.destroy());\n      if (streamRef.current) streamRef.current.getTracks().forEach(t => t.stop());\n    };\n  }, []);\n  const createPeer = (userToSignal, callerID, stream) => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on(\"signal\", signal => {\n      socket.emit(\"sending-signal\", {\n        userToSignal,\n        callerID,\n        signal\n      });\n    });\n    peer.on(\"stream\", remoteStream => {\n      var _remoteStream$getVide, _remoteStream$getVide2;\n      const trackLabel = ((_remoteStream$getVide = remoteStream.getVideoTracks()) === null || _remoteStream$getVide === void 0 ? void 0 : (_remoteStream$getVide2 = _remoteStream$getVide[0]) === null || _remoteStream$getVide2 === void 0 ? void 0 : _remoteStream$getVide2.label) || \"\";\n      if (trackLabel.toLowerCase().includes(\"screen\")) {\n        setScreenSharerID(userToSignal);\n      }\n      const videoElem = videoRefs.current[userToSignal];\n      if (videoElem) {\n        videoElem.srcObject = remoteStream;\n      }\n    });\n    peer.on(\"error\", err => console.error(\"Peer error (createPeer):\", err));\n    return peer;\n  };\n  const addPeer = (incomingSignal, callerId, name, stream) => {\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on(\"signal\", signal => {\n      socket.emit(\"returning-signal\", {\n        signal,\n        callerID: callerId\n      });\n    });\n    peer.on(\"stream\", remoteStream => {\n      var _remoteStream$getVide3, _remoteStream$getVide4;\n      const trackLabel = ((_remoteStream$getVide3 = remoteStream.getVideoTracks()) === null || _remoteStream$getVide3 === void 0 ? void 0 : (_remoteStream$getVide4 = _remoteStream$getVide3[0]) === null || _remoteStream$getVide4 === void 0 ? void 0 : _remoteStream$getVide4.label) || \"\";\n      if (trackLabel.toLowerCase().includes(\"screen\")) {\n        setScreenSharerID(callerId);\n      }\n      const videoElem = videoRefs.current[callerId];\n      if (videoElem) {\n        videoElem.srcObject = remoteStream;\n      }\n    });\n    peer.on(\"error\", err => console.error(\"Peer error (addPeer):\", err));\n    peer.signal(incomingSignal);\n    return peer;\n  };\n  const toggleMic = () => {\n    if (!streamRef.current) return;\n    streamRef.current.getAudioTracks().forEach(track => track.enabled = !micOn);\n    setMicOn(!micOn);\n  };\n  const toggleCam = () => {\n    if (!streamRef.current) return;\n    streamRef.current.getVideoTracks().forEach(track => track.enabled = !camOn);\n    setCamOn(!camOn);\n  };\n  const toggleScreenShare = async () => {\n    if (!isScreenSharing) {\n      try {\n        const screenStream = await navigator.mediaDevices.getDisplayMedia({\n          video: true\n        });\n        const screenTrack = screenStream.getVideoTracks()[0];\n        screenTrackRef.current = screenTrack;\n        peersRef.current.forEach(({\n          peer\n        }) => {\n          const sender = peer._pc.getSenders().find(s => s.track.kind === \"video\");\n          if (sender) sender.replaceTrack(screenTrack);\n        });\n        userVideo.current.srcObject = screenStream;\n        setIsScreenSharing(true);\n        screenTrack.onended = stopScreenShare;\n      } catch (err) {\n        console.error(\"Error sharing screen:\", err);\n      }\n    } else {\n      stopScreenShare();\n    }\n  };\n  const stopScreenShare = async () => {\n    if (screenTrackRef.current) screenTrackRef.current.stop();\n    const cameraStream = await navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    });\n    streamRef.current = cameraStream;\n    peersRef.current.forEach(({\n      peer\n    }) => {\n      const sender = peer._pc.getSenders().find(s => s.track.kind === \"video\");\n      if (sender) sender.replaceTrack(cameraStream.getVideoTracks()[0]);\n    });\n    userVideo.current.srcObject = cameraStream;\n    setIsScreenSharing(false);\n  };\n  const leaveMeeting = () => {\n    peersRef.current.forEach(({\n      peer\n    }) => peer.destroy());\n    peersRef.current = [];\n    if (streamRef.current) streamRef.current.getTracks().forEach(track => track.stop());\n    socket.disconnect();\n    window.location.href = \"/guest\";\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"guest-room-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"guest-room-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"logo\",\n        children: [\"Ve \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"gold\",\n          children: \"Meet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Room: \", roomID]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"username\",\n          children: [\"You: \", userName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 41\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), screenSharerID && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"screen-share-block\",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        autoPlay: true,\n        playsInline: true,\n        ref: el => {\n          if (el) {\n            videoRefs.current[screenSharerID] = el;\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"screen-share-name\",\n        children: ((_peers$find = peers.find(p => p.peerID === screenSharerID)) === null || _peers$find === void 0 ? void 0 : _peers$find.userName) || \"Presenter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"video-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-block\",\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          muted: true,\n          ref: userVideo,\n          autoPlay: true,\n          playsInline: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this), !isScreenSharing && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [userName, \" (You)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 32\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), peers.filter(p => p.peerID !== screenSharerID).map(({\n        peerID,\n        userName\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-block\",\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          playsInline: true,\n          autoPlay: true,\n          ref: el => {\n            if (el) videoRefs.current[peerID] = el;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: userName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }, this)]\n      }, peerID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"participants-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Participants (\", participants.length + 1, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [userName, \" (You)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this), participants.map((pName, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: pName\n        }, `${pName}-${idx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleMic,\n          children: micOn ? \"Mute\" : \"Unmute\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleCam,\n          children: camOn ? \"Video Off\" : \"Video On\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleScreenShare,\n          children: isScreenSharing ? \"Stop Sharing\" : \"Share Screen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"end-btn\",\n          onClick: leaveMeeting,\n          children: \"Leave Meeting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n};\n_s(GuestRoom, \"bWHFgDxAjzef6BiUQ9/p4J+5GBo=\");\n_c = GuestRoom;\nexport default GuestRoom;\nvar _c;\n$RefreshReg$(_c, \"GuestRoom\");","map":{"version":3,"names":["React","useEffect","useRef","useState","io","Peer","jsxDEV","_jsxDEV","SERVER_URL","process","env","REACT_APP_SERVER_URL","socket","secure","reconnection","rejectUnauthorized","GuestRoom","_s","_peers$find","peers","setPeers","participants","setParticipants","userName","setUserName","roomID","setRoomID","micOn","setMicOn","camOn","setCamOn","isScreenSharing","setIsScreenSharing","screenSharerID","setScreenSharerID","userVideo","peersRef","streamRef","videoRefs","screenTrackRef","name","prompt","room","navigator","mediaDevices","getUserMedia","video","audio","then","stream","current","srcObject","emit","roomId","on","users","newPeers","forEach","user","id","peer","createPeer","push","peerID","map","u","payload","addPeer","signal","list","includes","item","find","p","filter","catch","err","console","error","alert","disconnect","destroy","getTracks","t","stop","userToSignal","callerID","initiator","trickle","remoteStream","_remoteStream$getVide","_remoteStream$getVide2","trackLabel","getVideoTracks","label","toLowerCase","videoElem","incomingSignal","callerId","_remoteStream$getVide3","_remoteStream$getVide4","toggleMic","getAudioTracks","track","enabled","toggleCam","toggleScreenShare","screenStream","getDisplayMedia","screenTrack","sender","_pc","getSenders","s","kind","replaceTrack","onended","stopScreenShare","cameraStream","leaveMeeting","window","location","href","className","children","fileName","_jsxFileName","lineNumber","columnNumber","autoPlay","playsInline","ref","el","muted","length","pName","idx","onClick","_c","$RefreshReg$"],"sources":["C:/projects/Ve Meet TEST - 3/client/src/components/GuestRoom.js"],"sourcesContent":["// Cleaned GuestRoom.js with working fullscreen screen share block\r\n\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport Peer from \"simple-peer\";\r\nimport \"./GuestRoom.css\";\r\n\r\nconst SERVER_URL = process.env.REACT_APP_SERVER_URL || \"https://192.168.29.23:5000\";\r\n\r\nconst socket = io(SERVER_URL, {\r\n  secure: true,\r\n  reconnection: true,\r\n  rejectUnauthorized: false,\r\n});\r\n\r\nconst GuestRoom = () => {\r\n  const [peers, setPeers] = useState([]);\r\n  const [participants, setParticipants] = useState([]);\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [roomID, setRoomID] = useState(\"\");\r\n  const [micOn, setMicOn] = useState(true);\r\n  const [camOn, setCamOn] = useState(true);\r\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\r\n  const [screenSharerID, setScreenSharerID] = useState(null);\r\n\r\n  const userVideo = useRef();\r\n  const peersRef = useRef([]);\r\n  const streamRef = useRef();\r\n  const videoRefs = useRef({});\r\n  const screenTrackRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const name = prompt(\"Enter your name\");\r\n    const room = prompt(\"Enter room code\");\r\n    setUserName(name);\r\n    setRoomID(room);\r\n\r\n    navigator.mediaDevices\r\n      .getUserMedia({ video: true, audio: true })\r\n      .then((stream) => {\r\n        streamRef.current = stream;\r\n        if (userVideo.current) {\r\n          userVideo.current.srcObject = stream;\r\n        }\r\n\r\n        socket.emit(\"join-room\", { roomId: room, userName: name });\r\n\r\n        socket.on(\"all-users\", (users) => {\r\n          const newPeers = [];\r\n          users.forEach((user) => {\r\n            if (user.id === socket.id) return;\r\n            const peer = createPeer(user.id, socket.id, stream);\r\n            peersRef.current.push({ peerID: user.id, peer, userName: user.name });\r\n            newPeers.push({ peerID: user.id, peer, userName: user.name });\r\n          });\r\n          setPeers(newPeers);\r\n          setParticipants(users.map((u) => u.name));\r\n        });\r\n\r\n        socket.on(\"user-joined\", (payload) => {\r\n          const peer = addPeer(payload.signal, payload.id, payload.name, stream);\r\n          peersRef.current.push({ peerID: payload.id, peer, userName: payload.name });\r\n          setPeers((users) => [...users, { peerID: payload.id, peer, userName: payload.name }]);\r\n          setParticipants((list) => {\r\n            if (!list.includes(payload.name)) return [...list, payload.name];\r\n            return list;\r\n          });\r\n        });\r\n\r\n        socket.on(\"receiving-returned-signal\", (payload) => {\r\n          const item = peersRef.current.find((p) => p.peerID === payload.id);\r\n          if (item && item.peer) {\r\n            item.peer.signal(payload.signal);\r\n          }\r\n        });\r\n\r\n        socket.on(\"user-disconnected\", (id) => {\r\n          setPeers((users) => users.filter((p) => p.peerID !== id));\r\n          peersRef.current = peersRef.current.filter((p) => p.peerID !== id);\r\n          setParticipants(peersRef.current.map((p) => p.userName));\r\n          delete videoRefs.current[id];\r\n          if (screenSharerID === id) setScreenSharerID(null);\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"Media Device Error:\", err);\r\n        alert(\"Could not access camera/microphone.\");\r\n      });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n      peersRef.current.forEach(({ peer }) => peer.destroy());\r\n      if (streamRef.current) streamRef.current.getTracks().forEach((t) => t.stop());\r\n    };\r\n  }, []);\r\n\r\n  const createPeer = (userToSignal, callerID, stream) => {\r\n    const peer = new Peer({\r\n      initiator: true,\r\n      trickle: false,\r\n      stream,\r\n    });\r\n\r\n    peer.on(\"signal\", (signal) => {\r\n      socket.emit(\"sending-signal\", { userToSignal, callerID, signal });\r\n    });\r\n\r\n    peer.on(\"stream\", (remoteStream) => {\r\n      const trackLabel = remoteStream.getVideoTracks()?.[0]?.label || \"\";\r\n      if (trackLabel.toLowerCase().includes(\"screen\")) {\r\n        setScreenSharerID(userToSignal);\r\n      }\r\n      const videoElem = videoRefs.current[userToSignal];\r\n      if (videoElem) {\r\n        videoElem.srcObject = remoteStream;\r\n      }\r\n    });\r\n\r\n    peer.on(\"error\", (err) => console.error(\"Peer error (createPeer):\", err));\r\n    return peer;\r\n  };\r\n\r\n  const addPeer = (incomingSignal, callerId, name, stream) => {\r\n    const peer = new Peer({\r\n      initiator: false,\r\n      trickle: false,\r\n      stream,\r\n    });\r\n\r\n    peer.on(\"signal\", (signal) => {\r\n      socket.emit(\"returning-signal\", { signal, callerID: callerId });\r\n    });\r\n\r\n    peer.on(\"stream\", (remoteStream) => {\r\n      const trackLabel = remoteStream.getVideoTracks()?.[0]?.label || \"\";\r\n      if (trackLabel.toLowerCase().includes(\"screen\")) {\r\n        setScreenSharerID(callerId);\r\n      }\r\n      const videoElem = videoRefs.current[callerId];\r\n      if (videoElem) {\r\n        videoElem.srcObject = remoteStream;\r\n      }\r\n    });\r\n\r\n    peer.on(\"error\", (err) => console.error(\"Peer error (addPeer):\", err));\r\n    peer.signal(incomingSignal);\r\n    return peer;\r\n  };\r\n\r\n  const toggleMic = () => {\r\n    if (!streamRef.current) return;\r\n    streamRef.current.getAudioTracks().forEach((track) => (track.enabled = !micOn));\r\n    setMicOn(!micOn);\r\n  };\r\n\r\n  const toggleCam = () => {\r\n    if (!streamRef.current) return;\r\n    streamRef.current.getVideoTracks().forEach((track) => (track.enabled = !camOn));\r\n    setCamOn(!camOn);\r\n  };\r\n\r\n  const toggleScreenShare = async () => {\r\n    if (!isScreenSharing) {\r\n      try {\r\n        const screenStream = await navigator.mediaDevices.getDisplayMedia({ video: true });\r\n        const screenTrack = screenStream.getVideoTracks()[0];\r\n        screenTrackRef.current = screenTrack;\r\n\r\n        peersRef.current.forEach(({ peer }) => {\r\n          const sender = peer._pc.getSenders().find((s) => s.track.kind === \"video\");\r\n          if (sender) sender.replaceTrack(screenTrack);\r\n        });\r\n\r\n        userVideo.current.srcObject = screenStream;\r\n        setIsScreenSharing(true);\r\n        screenTrack.onended = stopScreenShare;\r\n      } catch (err) {\r\n        console.error(\"Error sharing screen:\", err);\r\n      }\r\n    } else {\r\n      stopScreenShare();\r\n    }\r\n  };\r\n\r\n  const stopScreenShare = async () => {\r\n    if (screenTrackRef.current) screenTrackRef.current.stop();\r\n    const cameraStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n    streamRef.current = cameraStream;\r\n    peersRef.current.forEach(({ peer }) => {\r\n      const sender = peer._pc.getSenders().find((s) => s.track.kind === \"video\");\r\n      if (sender) sender.replaceTrack(cameraStream.getVideoTracks()[0]);\r\n    });\r\n    userVideo.current.srcObject = cameraStream;\r\n    setIsScreenSharing(false);\r\n  };\r\n\r\n  const leaveMeeting = () => {\r\n    peersRef.current.forEach(({ peer }) => peer.destroy());\r\n    peersRef.current = [];\r\n    if (streamRef.current) streamRef.current.getTracks().forEach((track) => track.stop());\r\n    socket.disconnect();\r\n    window.location.href = \"/guest\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"guest-room-container\">\r\n      <header className=\"guest-room-header\">\r\n        <h2 className=\"logo\">Ve <span className=\"gold\">Meet</span></h2>\r\n        <div><span>Room: {roomID}</span><span className=\"username\">You: {userName}</span></div>\r\n      </header>\r\n\r\n      {screenSharerID && (\r\n        <div className=\"screen-share-block\">\r\n          <video\r\n            autoPlay\r\n            playsInline\r\n            ref={(el) => {\r\n              if (el) {\r\n                videoRefs.current[screenSharerID] = el;\r\n              }\r\n            }}\r\n          />\r\n          <p className=\"screen-share-name\">\r\n            {peers.find((p) => p.peerID === screenSharerID)?.userName || \"Presenter\"}\r\n          </p>\r\n        </div>\r\n      )}\r\n\r\n      <main className=\"video-grid\">\r\n        <div className=\"video-block\">\r\n          <video muted ref={userVideo} autoPlay playsInline />\r\n          {!isScreenSharing && <p>{userName} (You)</p>}\r\n        </div>\r\n\r\n        {peers.filter(p => p.peerID !== screenSharerID).map(({ peerID, userName }) => (\r\n          <div className=\"video-block\" key={peerID}>\r\n            <video\r\n              playsInline\r\n              autoPlay\r\n              ref={(el) => {\r\n                if (el) videoRefs.current[peerID] = el;\r\n              }}\r\n            />\r\n            <p>{userName}</p>\r\n          </div>\r\n        ))}\r\n      </main>\r\n\r\n      <aside className=\"participants-panel\">\r\n        <h3>Participants ({participants.length + 1})</h3>\r\n        <ul>\r\n          <li>{userName} (You)</li>\r\n          {participants.map((pName, idx) => (\r\n            <li key={`${pName}-${idx}`}>{pName}</li>\r\n          ))}\r\n        </ul>\r\n        <div className=\"controls\">\r\n          <button onClick={toggleMic}>{micOn ? \"Mute\" : \"Unmute\"}</button>\r\n          <button onClick={toggleCam}>{camOn ? \"Video Off\" : \"Video On\"}</button>\r\n          <button onClick={toggleScreenShare}>{isScreenSharing ? \"Stop Sharing\" : \"Share Screen\"}</button>\r\n          <button className=\"end-btn\" onClick={leaveMeeting}>Leave Meeting</button>\r\n        </div>\r\n      </aside>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GuestRoom;\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAOC,IAAI,MAAM,aAAa;AAC9B,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,UAAU,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,IAAI,4BAA4B;AAEnF,MAAMC,MAAM,GAAGR,EAAE,CAACI,UAAU,EAAE;EAC5BK,MAAM,EAAE,IAAI;EACZC,YAAY,EAAE,IAAI;EAClBC,kBAAkB,EAAE;AACtB,CAAC,CAAC;AAEF,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,WAAA;EACtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACkB,YAAY,EAAEC,eAAe,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACoB,QAAQ,EAAEC,WAAW,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACsB,MAAM,EAAEC,SAAS,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACwB,KAAK,EAAEC,QAAQ,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAAC0B,KAAK,EAAEC,QAAQ,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAAC4B,eAAe,EAAEC,kBAAkB,CAAC,GAAG7B,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAAC8B,cAAc,EAAEC,iBAAiB,CAAC,GAAG/B,QAAQ,CAAC,IAAI,CAAC;EAE1D,MAAMgC,SAAS,GAAGjC,MAAM,CAAC,CAAC;EAC1B,MAAMkC,QAAQ,GAAGlC,MAAM,CAAC,EAAE,CAAC;EAC3B,MAAMmC,SAAS,GAAGnC,MAAM,CAAC,CAAC;EAC1B,MAAMoC,SAAS,GAAGpC,MAAM,CAAC,CAAC,CAAC,CAAC;EAC5B,MAAMqC,cAAc,GAAGrC,MAAM,CAAC,CAAC;EAE/BD,SAAS,CAAC,MAAM;IACd,MAAMuC,IAAI,GAAGC,MAAM,CAAC,iBAAiB,CAAC;IACtC,MAAMC,IAAI,GAAGD,MAAM,CAAC,iBAAiB,CAAC;IACtCjB,WAAW,CAACgB,IAAI,CAAC;IACjBd,SAAS,CAACgB,IAAI,CAAC;IAEfC,SAAS,CAACC,YAAY,CACnBC,YAAY,CAAC;MAAEC,KAAK,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC,CAC1CC,IAAI,CAAEC,MAAM,IAAK;MAChBZ,SAAS,CAACa,OAAO,GAAGD,MAAM;MAC1B,IAAId,SAAS,CAACe,OAAO,EAAE;QACrBf,SAAS,CAACe,OAAO,CAACC,SAAS,GAAGF,MAAM;MACtC;MAEArC,MAAM,CAACwC,IAAI,CAAC,WAAW,EAAE;QAAEC,MAAM,EAAEX,IAAI;QAAEnB,QAAQ,EAAEiB;MAAK,CAAC,CAAC;MAE1D5B,MAAM,CAAC0C,EAAE,CAAC,WAAW,EAAGC,KAAK,IAAK;QAChC,MAAMC,QAAQ,GAAG,EAAE;QACnBD,KAAK,CAACE,OAAO,CAAEC,IAAI,IAAK;UACtB,IAAIA,IAAI,CAACC,EAAE,KAAK/C,MAAM,CAAC+C,EAAE,EAAE;UAC3B,MAAMC,IAAI,GAAGC,UAAU,CAACH,IAAI,CAACC,EAAE,EAAE/C,MAAM,CAAC+C,EAAE,EAAEV,MAAM,CAAC;UACnDb,QAAQ,CAACc,OAAO,CAACY,IAAI,CAAC;YAAEC,MAAM,EAAEL,IAAI,CAACC,EAAE;YAAEC,IAAI;YAAErC,QAAQ,EAAEmC,IAAI,CAAClB;UAAK,CAAC,CAAC;UACrEgB,QAAQ,CAACM,IAAI,CAAC;YAAEC,MAAM,EAAEL,IAAI,CAACC,EAAE;YAAEC,IAAI;YAAErC,QAAQ,EAAEmC,IAAI,CAAClB;UAAK,CAAC,CAAC;QAC/D,CAAC,CAAC;QACFpB,QAAQ,CAACoC,QAAQ,CAAC;QAClBlC,eAAe,CAACiC,KAAK,CAACS,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACzB,IAAI,CAAC,CAAC;MAC3C,CAAC,CAAC;MAEF5B,MAAM,CAAC0C,EAAE,CAAC,aAAa,EAAGY,OAAO,IAAK;QACpC,MAAMN,IAAI,GAAGO,OAAO,CAACD,OAAO,CAACE,MAAM,EAAEF,OAAO,CAACP,EAAE,EAAEO,OAAO,CAAC1B,IAAI,EAAES,MAAM,CAAC;QACtEb,QAAQ,CAACc,OAAO,CAACY,IAAI,CAAC;UAAEC,MAAM,EAAEG,OAAO,CAACP,EAAE;UAAEC,IAAI;UAAErC,QAAQ,EAAE2C,OAAO,CAAC1B;QAAK,CAAC,CAAC;QAC3EpB,QAAQ,CAAEmC,KAAK,IAAK,CAAC,GAAGA,KAAK,EAAE;UAAEQ,MAAM,EAAEG,OAAO,CAACP,EAAE;UAAEC,IAAI;UAAErC,QAAQ,EAAE2C,OAAO,CAAC1B;QAAK,CAAC,CAAC,CAAC;QACrFlB,eAAe,CAAE+C,IAAI,IAAK;UACxB,IAAI,CAACA,IAAI,CAACC,QAAQ,CAACJ,OAAO,CAAC1B,IAAI,CAAC,EAAE,OAAO,CAAC,GAAG6B,IAAI,EAAEH,OAAO,CAAC1B,IAAI,CAAC;UAChE,OAAO6B,IAAI;QACb,CAAC,CAAC;MACJ,CAAC,CAAC;MAEFzD,MAAM,CAAC0C,EAAE,CAAC,2BAA2B,EAAGY,OAAO,IAAK;QAClD,MAAMK,IAAI,GAAGnC,QAAQ,CAACc,OAAO,CAACsB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACV,MAAM,KAAKG,OAAO,CAACP,EAAE,CAAC;QAClE,IAAIY,IAAI,IAAIA,IAAI,CAACX,IAAI,EAAE;UACrBW,IAAI,CAACX,IAAI,CAACQ,MAAM,CAACF,OAAO,CAACE,MAAM,CAAC;QAClC;MACF,CAAC,CAAC;MAEFxD,MAAM,CAAC0C,EAAE,CAAC,mBAAmB,EAAGK,EAAE,IAAK;QACrCvC,QAAQ,CAAEmC,KAAK,IAAKA,KAAK,CAACmB,MAAM,CAAED,CAAC,IAAKA,CAAC,CAACV,MAAM,KAAKJ,EAAE,CAAC,CAAC;QACzDvB,QAAQ,CAACc,OAAO,GAAGd,QAAQ,CAACc,OAAO,CAACwB,MAAM,CAAED,CAAC,IAAKA,CAAC,CAACV,MAAM,KAAKJ,EAAE,CAAC;QAClErC,eAAe,CAACc,QAAQ,CAACc,OAAO,CAACc,GAAG,CAAES,CAAC,IAAKA,CAAC,CAAClD,QAAQ,CAAC,CAAC;QACxD,OAAOe,SAAS,CAACY,OAAO,CAACS,EAAE,CAAC;QAC5B,IAAI1B,cAAc,KAAK0B,EAAE,EAAEzB,iBAAiB,CAAC,IAAI,CAAC;MACpD,CAAC,CAAC;IACJ,CAAC,CAAC,CACDyC,KAAK,CAAEC,GAAG,IAAK;MACdC,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEF,GAAG,CAAC;MACzCG,KAAK,CAAC,qCAAqC,CAAC;IAC9C,CAAC,CAAC;IAEJ,OAAO,MAAM;MACXnE,MAAM,CAACoE,UAAU,CAAC,CAAC;MACnB5C,QAAQ,CAACc,OAAO,CAACO,OAAO,CAAC,CAAC;QAAEG;MAAK,CAAC,KAAKA,IAAI,CAACqB,OAAO,CAAC,CAAC,CAAC;MACtD,IAAI5C,SAAS,CAACa,OAAO,EAAEb,SAAS,CAACa,OAAO,CAACgC,SAAS,CAAC,CAAC,CAACzB,OAAO,CAAE0B,CAAC,IAAKA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;IAC/E,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMvB,UAAU,GAAGA,CAACwB,YAAY,EAAEC,QAAQ,EAAErC,MAAM,KAAK;IACrD,MAAMW,IAAI,GAAG,IAAIvD,IAAI,CAAC;MACpBkF,SAAS,EAAE,IAAI;MACfC,OAAO,EAAE,KAAK;MACdvC;IACF,CAAC,CAAC;IAEFW,IAAI,CAACN,EAAE,CAAC,QAAQ,EAAGc,MAAM,IAAK;MAC5BxD,MAAM,CAACwC,IAAI,CAAC,gBAAgB,EAAE;QAAEiC,YAAY;QAAEC,QAAQ;QAAElB;MAAO,CAAC,CAAC;IACnE,CAAC,CAAC;IAEFR,IAAI,CAACN,EAAE,CAAC,QAAQ,EAAGmC,YAAY,IAAK;MAAA,IAAAC,qBAAA,EAAAC,sBAAA;MAClC,MAAMC,UAAU,GAAG,EAAAF,qBAAA,GAAAD,YAAY,CAACI,cAAc,CAAC,CAAC,cAAAH,qBAAA,wBAAAC,sBAAA,GAA7BD,qBAAA,CAAgC,CAAC,CAAC,cAAAC,sBAAA,uBAAlCA,sBAAA,CAAoCG,KAAK,KAAI,EAAE;MAClE,IAAIF,UAAU,CAACG,WAAW,CAAC,CAAC,CAACzB,QAAQ,CAAC,QAAQ,CAAC,EAAE;QAC/CpC,iBAAiB,CAACmD,YAAY,CAAC;MACjC;MACA,MAAMW,SAAS,GAAG1D,SAAS,CAACY,OAAO,CAACmC,YAAY,CAAC;MACjD,IAAIW,SAAS,EAAE;QACbA,SAAS,CAAC7C,SAAS,GAAGsC,YAAY;MACpC;IACF,CAAC,CAAC;IAEF7B,IAAI,CAACN,EAAE,CAAC,OAAO,EAAGsB,GAAG,IAAKC,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEF,GAAG,CAAC,CAAC;IACzE,OAAOhB,IAAI;EACb,CAAC;EAED,MAAMO,OAAO,GAAGA,CAAC8B,cAAc,EAAEC,QAAQ,EAAE1D,IAAI,EAAES,MAAM,KAAK;IAC1D,MAAMW,IAAI,GAAG,IAAIvD,IAAI,CAAC;MACpBkF,SAAS,EAAE,KAAK;MAChBC,OAAO,EAAE,KAAK;MACdvC;IACF,CAAC,CAAC;IAEFW,IAAI,CAACN,EAAE,CAAC,QAAQ,EAAGc,MAAM,IAAK;MAC5BxD,MAAM,CAACwC,IAAI,CAAC,kBAAkB,EAAE;QAAEgB,MAAM;QAAEkB,QAAQ,EAAEY;MAAS,CAAC,CAAC;IACjE,CAAC,CAAC;IAEFtC,IAAI,CAACN,EAAE,CAAC,QAAQ,EAAGmC,YAAY,IAAK;MAAA,IAAAU,sBAAA,EAAAC,sBAAA;MAClC,MAAMR,UAAU,GAAG,EAAAO,sBAAA,GAAAV,YAAY,CAACI,cAAc,CAAC,CAAC,cAAAM,sBAAA,wBAAAC,sBAAA,GAA7BD,sBAAA,CAAgC,CAAC,CAAC,cAAAC,sBAAA,uBAAlCA,sBAAA,CAAoCN,KAAK,KAAI,EAAE;MAClE,IAAIF,UAAU,CAACG,WAAW,CAAC,CAAC,CAACzB,QAAQ,CAAC,QAAQ,CAAC,EAAE;QAC/CpC,iBAAiB,CAACgE,QAAQ,CAAC;MAC7B;MACA,MAAMF,SAAS,GAAG1D,SAAS,CAACY,OAAO,CAACgD,QAAQ,CAAC;MAC7C,IAAIF,SAAS,EAAE;QACbA,SAAS,CAAC7C,SAAS,GAAGsC,YAAY;MACpC;IACF,CAAC,CAAC;IAEF7B,IAAI,CAACN,EAAE,CAAC,OAAO,EAAGsB,GAAG,IAAKC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,GAAG,CAAC,CAAC;IACtEhB,IAAI,CAACQ,MAAM,CAAC6B,cAAc,CAAC;IAC3B,OAAOrC,IAAI;EACb,CAAC;EAED,MAAMyC,SAAS,GAAGA,CAAA,KAAM;IACtB,IAAI,CAAChE,SAAS,CAACa,OAAO,EAAE;IACxBb,SAAS,CAACa,OAAO,CAACoD,cAAc,CAAC,CAAC,CAAC7C,OAAO,CAAE8C,KAAK,IAAMA,KAAK,CAACC,OAAO,GAAG,CAAC7E,KAAM,CAAC;IAC/EC,QAAQ,CAAC,CAACD,KAAK,CAAC;EAClB,CAAC;EAED,MAAM8E,SAAS,GAAGA,CAAA,KAAM;IACtB,IAAI,CAACpE,SAAS,CAACa,OAAO,EAAE;IACxBb,SAAS,CAACa,OAAO,CAAC2C,cAAc,CAAC,CAAC,CAACpC,OAAO,CAAE8C,KAAK,IAAMA,KAAK,CAACC,OAAO,GAAG,CAAC3E,KAAM,CAAC;IAC/EC,QAAQ,CAAC,CAACD,KAAK,CAAC;EAClB,CAAC;EAED,MAAM6E,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI,CAAC3E,eAAe,EAAE;MACpB,IAAI;QACF,MAAM4E,YAAY,GAAG,MAAMhE,SAAS,CAACC,YAAY,CAACgE,eAAe,CAAC;UAAE9D,KAAK,EAAE;QAAK,CAAC,CAAC;QAClF,MAAM+D,WAAW,GAAGF,YAAY,CAACd,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;QACpDtD,cAAc,CAACW,OAAO,GAAG2D,WAAW;QAEpCzE,QAAQ,CAACc,OAAO,CAACO,OAAO,CAAC,CAAC;UAAEG;QAAK,CAAC,KAAK;UACrC,MAAMkD,MAAM,GAAGlD,IAAI,CAACmD,GAAG,CAACC,UAAU,CAAC,CAAC,CAACxC,IAAI,CAAEyC,CAAC,IAAKA,CAAC,CAACV,KAAK,CAACW,IAAI,KAAK,OAAO,CAAC;UAC1E,IAAIJ,MAAM,EAAEA,MAAM,CAACK,YAAY,CAACN,WAAW,CAAC;QAC9C,CAAC,CAAC;QAEF1E,SAAS,CAACe,OAAO,CAACC,SAAS,GAAGwD,YAAY;QAC1C3E,kBAAkB,CAAC,IAAI,CAAC;QACxB6E,WAAW,CAACO,OAAO,GAAGC,eAAe;MACvC,CAAC,CAAC,OAAOzC,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,GAAG,CAAC;MAC7C;IACF,CAAC,MAAM;MACLyC,eAAe,CAAC,CAAC;IACnB;EACF,CAAC;EAED,MAAMA,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI9E,cAAc,CAACW,OAAO,EAAEX,cAAc,CAACW,OAAO,CAACkC,IAAI,CAAC,CAAC;IACzD,MAAMkC,YAAY,GAAG,MAAM3E,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MAAEC,KAAK,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IAC5FV,SAAS,CAACa,OAAO,GAAGoE,YAAY;IAChClF,QAAQ,CAACc,OAAO,CAACO,OAAO,CAAC,CAAC;MAAEG;IAAK,CAAC,KAAK;MACrC,MAAMkD,MAAM,GAAGlD,IAAI,CAACmD,GAAG,CAACC,UAAU,CAAC,CAAC,CAACxC,IAAI,CAAEyC,CAAC,IAAKA,CAAC,CAACV,KAAK,CAACW,IAAI,KAAK,OAAO,CAAC;MAC1E,IAAIJ,MAAM,EAAEA,MAAM,CAACK,YAAY,CAACG,YAAY,CAACzB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnE,CAAC,CAAC;IACF1D,SAAS,CAACe,OAAO,CAACC,SAAS,GAAGmE,YAAY;IAC1CtF,kBAAkB,CAAC,KAAK,CAAC;EAC3B,CAAC;EAED,MAAMuF,YAAY,GAAGA,CAAA,KAAM;IACzBnF,QAAQ,CAACc,OAAO,CAACO,OAAO,CAAC,CAAC;MAAEG;IAAK,CAAC,KAAKA,IAAI,CAACqB,OAAO,CAAC,CAAC,CAAC;IACtD7C,QAAQ,CAACc,OAAO,GAAG,EAAE;IACrB,IAAIb,SAAS,CAACa,OAAO,EAAEb,SAAS,CAACa,OAAO,CAACgC,SAAS,CAAC,CAAC,CAACzB,OAAO,CAAE8C,KAAK,IAAKA,KAAK,CAACnB,IAAI,CAAC,CAAC,CAAC;IACrFxE,MAAM,CAACoE,UAAU,CAAC,CAAC;IACnBwC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC,CAAC;EAED,oBACEnH,OAAA;IAAKoH,SAAS,EAAC,sBAAsB;IAAAC,QAAA,gBACnCrH,OAAA;MAAQoH,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBACnCrH,OAAA;QAAIoH,SAAS,EAAC,MAAM;QAAAC,QAAA,GAAC,KAAG,eAAArH,OAAA;UAAMoH,SAAS,EAAC,MAAM;UAAAC,QAAA,EAAC;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC/DzH,OAAA;QAAAqH,QAAA,gBAAKrH,OAAA;UAAAqH,QAAA,GAAM,QAAM,EAACnG,MAAM;QAAA;UAAAoG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAAAzH,OAAA;UAAMoH,SAAS,EAAC,UAAU;UAAAC,QAAA,GAAC,OAAK,EAACrG,QAAQ;QAAA;UAAAsG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjF,CAAC,EAER/F,cAAc,iBACb1B,OAAA;MAAKoH,SAAS,EAAC,oBAAoB;MAAAC,QAAA,gBACjCrH,OAAA;QACE0H,QAAQ;QACRC,WAAW;QACXC,GAAG,EAAGC,EAAE,IAAK;UACX,IAAIA,EAAE,EAAE;YACN9F,SAAS,CAACY,OAAO,CAACjB,cAAc,CAAC,GAAGmG,EAAE;UACxC;QACF;MAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACFzH,OAAA;QAAGoH,SAAS,EAAC,mBAAmB;QAAAC,QAAA,EAC7B,EAAA1G,WAAA,GAAAC,KAAK,CAACqD,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACV,MAAM,KAAK9B,cAAc,CAAC,cAAAf,WAAA,uBAA9CA,WAAA,CAAgDK,QAAQ,KAAI;MAAW;QAAAsG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CACN,eAEDzH,OAAA;MAAMoH,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAC1BrH,OAAA;QAAKoH,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC1BrH,OAAA;UAAO8H,KAAK;UAACF,GAAG,EAAEhG,SAAU;UAAC8F,QAAQ;UAACC,WAAW;QAAA;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,EACnD,CAACjG,eAAe,iBAAIxB,OAAA;UAAAqH,QAAA,GAAIrG,QAAQ,EAAC,QAAM;QAAA;UAAAsG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzC,CAAC,EAEL7G,KAAK,CAACuD,MAAM,CAACD,CAAC,IAAIA,CAAC,CAACV,MAAM,KAAK9B,cAAc,CAAC,CAAC+B,GAAG,CAAC,CAAC;QAAED,MAAM;QAAExC;MAAS,CAAC,kBACvEhB,OAAA;QAAKoH,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC1BrH,OAAA;UACE2H,WAAW;UACXD,QAAQ;UACRE,GAAG,EAAGC,EAAE,IAAK;YACX,IAAIA,EAAE,EAAE9F,SAAS,CAACY,OAAO,CAACa,MAAM,CAAC,GAAGqE,EAAE;UACxC;QAAE;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eACFzH,OAAA;UAAAqH,QAAA,EAAIrG;QAAQ;UAAAsG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GARejE,MAAM;QAAA8D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASnC,CACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAEPzH,OAAA;MAAOoH,SAAS,EAAC,oBAAoB;MAAAC,QAAA,gBACnCrH,OAAA;QAAAqH,QAAA,GAAI,gBAAc,EAACvG,YAAY,CAACiH,MAAM,GAAG,CAAC,EAAC,GAAC;MAAA;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjDzH,OAAA;QAAAqH,QAAA,gBACErH,OAAA;UAAAqH,QAAA,GAAKrG,QAAQ,EAAC,QAAM;QAAA;UAAAsG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EACxB3G,YAAY,CAAC2C,GAAG,CAAC,CAACuE,KAAK,EAAEC,GAAG,kBAC3BjI,OAAA;UAAAqH,QAAA,EAA6BW;QAAK,GAAzB,GAAGA,KAAK,IAAIC,GAAG,EAAE;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAa,CACxC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACLzH,OAAA;QAAKoH,SAAS,EAAC,UAAU;QAAAC,QAAA,gBACvBrH,OAAA;UAAQkI,OAAO,EAAEpC,SAAU;UAAAuB,QAAA,EAAEjG,KAAK,GAAG,MAAM,GAAG;QAAQ;UAAAkG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC,eAChEzH,OAAA;UAAQkI,OAAO,EAAEhC,SAAU;UAAAmB,QAAA,EAAE/F,KAAK,GAAG,WAAW,GAAG;QAAU;UAAAgG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC,eACvEzH,OAAA;UAAQkI,OAAO,EAAE/B,iBAAkB;UAAAkB,QAAA,EAAE7F,eAAe,GAAG,cAAc,GAAG;QAAc;UAAA8F,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC,eAChGzH,OAAA;UAAQoH,SAAS,EAAC,SAAS;UAACc,OAAO,EAAElB,YAAa;UAAAK,QAAA,EAAC;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAAC/G,EAAA,CA1PID,SAAS;AAAA0H,EAAA,GAAT1H,SAAS;AA4Pf,eAAeA,SAAS;AAAC,IAAA0H,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}