{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\Ve Meet TEST - 3\\\\client\\\\src\\\\components\\\\GuestRoom.js\",\n  _s = $RefreshSig$();\n// GuestRoom.js â€“ Full Final Version with Fullscreen Host Video Toggle and Hover Buttons\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport \"./GuestRoom.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SERVER_URL = process.env.REACT_APP_SERVER_URL || \"https://192.168.29.23:5000\";\nconst socket = io(SERVER_URL, {\n  secure: true,\n  reconnection: true,\n  rejectUnauthorized: false\n});\nconst GuestRoom = () => {\n  _s();\n  var _peers$find;\n  const [peers, setPeers] = useState([]);\n  const [participants, setParticipants] = useState([]);\n  const [userName, setUserName] = useState(\"\");\n  const [roomID, setRoomID] = useState(\"\");\n  const [micOn, setMicOn] = useState(true);\n  const [camOn, setCamOn] = useState(true);\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\n  const [screenSharerID, setScreenSharerID] = useState(null);\n  const [hostID, setHostID] = useState(null); // NEW: host peer ID state\n\n  const userVideo = useRef();\n  const peersRef = useRef([]);\n  const streamRef = useRef();\n  const videoRefs = useRef({});\n  const screenTrackRef = useRef();\n  useEffect(() => {\n    const name = prompt(\"Enter your name\");\n    const room = prompt(\"Enter room code\");\n    setUserName(name);\n    setRoomID(room);\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      streamRef.current = stream;\n      if (userVideo.current) {\n        userVideo.current.srcObject = stream;\n      }\n      socket.emit(\"join-room\", {\n        roomId: room,\n        userName: name\n      });\n      socket.on(\"all-users\", users => {\n        const newPeers = [];\n        users.forEach(user => {\n          if (user.id === socket.id) return;\n          const peer = createPeer(user.id, socket.id, stream);\n          peersRef.current.push({\n            peerID: user.id,\n            peer,\n            userName: user.name\n          });\n          newPeers.push({\n            peerID: user.id,\n            peer,\n            userName: user.name\n          });\n        });\n        setPeers(newPeers);\n        setParticipants(users.map(u => u.name));\n\n        // Set Host ID as first peer in list (adjust if your host identification differs)\n        if (newPeers.length > 0) setHostID(newPeers[0].peerID);\n      });\n      socket.on(\"user-joined\", payload => {\n        const peer = addPeer(payload.signal, payload.id, payload.name, stream);\n        peersRef.current.push({\n          peerID: payload.id,\n          peer,\n          userName: payload.name\n        });\n        setPeers(users => [...users, {\n          peerID: payload.id,\n          peer,\n          userName: payload.name\n        }]);\n        setParticipants(list => {\n          if (!list.includes(payload.name)) return [...list, payload.name];\n          return list;\n        });\n      });\n      socket.on(\"receiving-returned-signal\", payload => {\n        const item = peersRef.current.find(p => p.peerID === payload.id);\n        if (item && item.peer) {\n          try {\n            item.peer.signal(payload.signal);\n          } catch (e) {\n            console.warn(\"Signal error caught and ignored:\", e);\n          }\n        }\n      });\n      socket.on(\"user-disconnected\", id => {\n        setPeers(users => users.filter(p => p.peerID !== id));\n\n        // Safely destroy peer to clean up\n        const peerObj = peersRef.current.find(p => p.peerID === id);\n        if (peerObj && peerObj.peer) {\n          try {\n            peerObj.peer.destroy();\n          } catch (e) {\n            console.warn(\"Peer destroy error ignored:\", e);\n          }\n        }\n        peersRef.current = peersRef.current.filter(p => p.peerID !== id);\n        setParticipants(peersRef.current.map(p => p.userName));\n        delete videoRefs.current[id];\n        if (screenSharerID === id) setScreenSharerID(null);\n        if (hostID === id) setHostID(null); // Clear hostID if host disconnects\n      });\n\n      // Added listener for participant updates\n      socket.on(\"update-participants\", participantsList => {\n        setParticipants(participantsList);\n      });\n    }).catch(err => {\n      console.error(\"Media Device Error:\", err);\n      alert(\"Could not access camera/microphone.\");\n    });\n    return () => {\n      socket.disconnect();\n      peersRef.current.forEach(({\n        peer\n      }) => peer.destroy());\n      if (streamRef.current) streamRef.current.getTracks().forEach(t => t.stop());\n    };\n  }, []);\n  const createPeer = (userToSignal, callerID, stream) => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on(\"signal\", signal => {\n      socket.emit(\"sending-signal\", {\n        userToSignal,\n        callerID,\n        signal\n      });\n    });\n    peer.on(\"stream\", remoteStream => {\n      var _remoteStream$getVide, _remoteStream$getVide2;\n      const videoElem = videoRefs.current[userToSignal];\n      if (videoElem) {\n        videoElem.srcObject = remoteStream;\n      }\n\n      // FULLSCREEN SHARE MOD: Detect if remote stream is screen share\n      const trackLabel = ((_remoteStream$getVide = remoteStream.getVideoTracks()) === null || _remoteStream$getVide === void 0 ? void 0 : (_remoteStream$getVide2 = _remoteStream$getVide[0]) === null || _remoteStream$getVide2 === void 0 ? void 0 : _remoteStream$getVide2.label) || \"\";\n      if (trackLabel.toLowerCase().includes(\"screen\")) {\n        setScreenSharerID(userToSignal);\n      }\n    });\n    peer.on(\"error\", err => console.error(\"Peer error (createPeer):\", err));\n    return peer;\n  };\n  const addPeer = (incomingSignal, callerId, name, stream) => {\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on(\"signal\", signal => {\n      socket.emit(\"returning-signal\", {\n        signal,\n        callerID: callerId\n      });\n    });\n    peer.on(\"stream\", remoteStream => {\n      var _remoteStream$getVide3, _remoteStream$getVide4;\n      const videoElem = videoRefs.current[callerId];\n      if (videoElem) {\n        videoElem.srcObject = remoteStream;\n      }\n\n      // FULLSCREEN SHARE MOD: Detect if remote stream is screen share\n      const trackLabel = ((_remoteStream$getVide3 = remoteStream.getVideoTracks()) === null || _remoteStream$getVide3 === void 0 ? void 0 : (_remoteStream$getVide4 = _remoteStream$getVide3[0]) === null || _remoteStream$getVide4 === void 0 ? void 0 : _remoteStream$getVide4.label) || \"\";\n      if (trackLabel.toLowerCase().includes(\"screen\")) {\n        setScreenSharerID(callerId);\n      }\n    });\n    peer.on(\"error\", err => console.error(\"Peer error (addPeer):\", err));\n    peer.signal(incomingSignal);\n    return peer;\n  };\n  const toggleMic = () => {\n    if (!streamRef.current) return;\n    streamRef.current.getAudioTracks().forEach(track => track.enabled = !micOn);\n    setMicOn(!micOn);\n  };\n  const toggleCam = () => {\n    if (!streamRef.current) return;\n    streamRef.current.getVideoTracks().forEach(track => track.enabled = !camOn);\n    setCamOn(!camOn);\n  };\n  const toggleScreenShare = async () => {\n    if (!isScreenSharing) {\n      try {\n        const screenStream = await navigator.mediaDevices.getDisplayMedia({\n          video: true\n        });\n        const screenTrack = screenStream.getVideoTracks()[0];\n        screenTrackRef.current = screenTrack;\n        Object.values(peersRef.current).forEach(({\n          peer\n        }) => {\n          const sender = peer._pc.getSenders().find(s => s.track.kind === \"video\");\n          if (sender) sender.replaceTrack(screenTrack);\n        });\n        if (userVideo.current) userVideo.current.srcObject = screenStream;\n        setIsScreenSharing(true);\n        screenTrack.onended = stopScreenShare;\n      } catch (err) {\n        console.error(\"Error sharing screen:\", err);\n      }\n    } else {\n      stopScreenShare();\n    }\n  };\n  const stopScreenShare = async () => {\n    if (screenTrackRef.current) screenTrackRef.current.stop();\n    const cameraStream = await navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    });\n    streamRef.current = cameraStream;\n    Object.values(peersRef.current).forEach(({\n      peer\n    }) => {\n      const sender = peer._pc.getSenders().find(s => s.track.kind === \"video\");\n      if (sender) sender.replaceTrack(cameraStream.getVideoTracks()[0]);\n    });\n    if (userVideo.current) userVideo.current.srcObject = cameraStream;\n    setIsScreenSharing(false);\n  };\n\n  // FULLSCREEN SHARE MOD: Toggle fullscreen on screen share video element\n  const toggleFullscreen = () => {\n    const screenVideoElem = videoRefs.current[screenSharerID];\n    if (!screenVideoElem) return;\n    if (!document.fullscreenElement) {\n      screenVideoElem.requestFullscreen().catch(err => {\n        console.error(\"Error enabling fullscreen:\", err);\n      });\n    } else {\n      document.exitFullscreen();\n    }\n  };\n\n  // NEW: Toggle fullscreen on Host video block only\n  const toggleHostFullscreen = () => {\n    if (!hostID) return;\n    const hostVideo = videoRefs.current[hostID];\n    if (!hostVideo) return;\n    if (!document.fullscreenElement) {\n      hostVideo.requestFullscreen().catch(err => {\n        console.error(\"Error enabling fullscreen:\", err);\n      });\n    } else {\n      document.exitFullscreen();\n    }\n  };\n  const leaveMeeting = () => {\n    peersRef.current.forEach(({\n      peer\n    }) => peer.destroy());\n    peersRef.current = [];\n    if (streamRef.current) streamRef.current.getTracks().forEach(track => track.stop());\n    socket.disconnect();\n    window.location.href = \"/guest\";\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"guest-room-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"guest-room-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"logo\",\n        children: [\"Ve \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"gold\",\n          children: \"Meet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 14\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Room: \", roomID]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"username\",\n          children: [\"You: \", userName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this), screenSharerID && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"screen-share-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        className: \"screen-share-video\",\n        autoPlay: true,\n        playsInline: true,\n        onClick: toggleFullscreen,\n        title: \"Click to toggle fullscreen\",\n        ref: el => {\n          if (el && videoRefs.current[screenSharerID]) {\n            el.srcObject = videoRefs.current[screenSharerID].srcObject;\n          } else if (el) {\n            videoRefs.current[screenSharerID] = el;\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"screen-share-username\",\n        children: ((_peers$find = peers.find(p => p.peerID === screenSharerID)) === null || _peers$find === void 0 ? void 0 : _peers$find.userName) || \"Presenter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"video-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `video-block ${isScreenSharing ? \"fullscreen-video\" : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          muted: true,\n          ref: userVideo,\n          autoPlay: true,\n          playsInline: true,\n          className: \"video\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this), !isScreenSharing && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [userName, \" (You)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 32\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this), peers.map(({\n        peerID,\n        userName\n      }) => {\n        if (peerID === screenSharerID) return null; // skip screen share user video here\n\n        const isHost = peerID === hostID;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-block\",\n          style: {\n            position: \"relative\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"video\", {\n            playsInline: true,\n            autoPlay: true,\n            ref: el => {\n              if (el) videoRefs.current[peerID] = el;else delete videoRefs.current[peerID];\n            },\n            className: \"video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: userName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 15\n          }, this), userName === \"Chanakya\" && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"host-video-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"pip-btn\",\n              title: \"Picture in Picture\",\n              children: \"\\uD83D\\uDCFA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"enhance-btn\",\n              title: \"Enhancement\",\n              children: \"\\u2728\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: toggleHostFullscreen,\n              title: \"Fullscreen Host Video\",\n              className: \"fullscreen-btn\",\n              children: \"\\u26F6\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 17\n          }, this)]\n        }, peerID, true, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"participants-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Participants (\", participants.length + 1, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [userName, \" (You)\"]\n        }, userName + \"-self\", true, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 11\n        }, this), participants.map((pName, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: pName\n        }, `${pName}-${idx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleMic,\n          children: micOn ? \"Mute\" : \"Unmute\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleCam,\n          children: camOn ? \"Video Off\" : \"Video On\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleScreenShare,\n          children: isScreenSharing ? \"Stop Sharing\" : \"Share Screen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"end-btn\",\n          onClick: leaveMeeting,\n          children: \"Leave Meeting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 5\n  }, this);\n};\n_s(GuestRoom, \"aWyxdGL7C6BoAixedxV4D8TLSoU=\");\n_c = GuestRoom;\nexport default GuestRoom;\nvar _c;\n$RefreshReg$(_c, \"GuestRoom\");","map":{"version":3,"names":["React","useEffect","useRef","useState","io","Peer","jsxDEV","_jsxDEV","SERVER_URL","process","env","REACT_APP_SERVER_URL","socket","secure","reconnection","rejectUnauthorized","GuestRoom","_s","_peers$find","peers","setPeers","participants","setParticipants","userName","setUserName","roomID","setRoomID","micOn","setMicOn","camOn","setCamOn","isScreenSharing","setIsScreenSharing","screenSharerID","setScreenSharerID","hostID","setHostID","userVideo","peersRef","streamRef","videoRefs","screenTrackRef","name","prompt","room","navigator","mediaDevices","getUserMedia","video","audio","then","stream","current","srcObject","emit","roomId","on","users","newPeers","forEach","user","id","peer","createPeer","push","peerID","map","u","length","payload","addPeer","signal","list","includes","item","find","p","e","console","warn","filter","peerObj","destroy","participantsList","catch","err","error","alert","disconnect","getTracks","t","stop","userToSignal","callerID","initiator","trickle","remoteStream","_remoteStream$getVide","_remoteStream$getVide2","videoElem","trackLabel","getVideoTracks","label","toLowerCase","incomingSignal","callerId","_remoteStream$getVide3","_remoteStream$getVide4","toggleMic","getAudioTracks","track","enabled","toggleCam","toggleScreenShare","screenStream","getDisplayMedia","screenTrack","Object","values","sender","_pc","getSenders","s","kind","replaceTrack","onended","stopScreenShare","cameraStream","toggleFullscreen","screenVideoElem","document","fullscreenElement","requestFullscreen","exitFullscreen","toggleHostFullscreen","hostVideo","leaveMeeting","window","location","href","className","children","fileName","_jsxFileName","lineNumber","columnNumber","autoPlay","playsInline","onClick","title","ref","el","muted","isHost","style","position","pName","idx","_c","$RefreshReg$"],"sources":["C:/projects/Ve Meet TEST - 3/client/src/components/GuestRoom.js"],"sourcesContent":["// GuestRoom.js â€“ Full Final Version with Fullscreen Host Video Toggle and Hover Buttons\r\n\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport Peer from \"simple-peer\";\r\nimport \"./GuestRoom.css\";\r\n\r\nconst SERVER_URL = process.env.REACT_APP_SERVER_URL || \"https://192.168.29.23:5000\";\r\n\r\nconst socket = io(SERVER_URL, {\r\n  secure: true,\r\n  reconnection: true,\r\n  rejectUnauthorized: false,\r\n});\r\n\r\nconst GuestRoom = () => {\r\n  const [peers, setPeers] = useState([]);\r\n  const [participants, setParticipants] = useState([]);\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [roomID, setRoomID] = useState(\"\");\r\n  const [micOn, setMicOn] = useState(true);\r\n  const [camOn, setCamOn] = useState(true);\r\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\r\n  const [screenSharerID, setScreenSharerID] = useState(null);\r\n  const [hostID, setHostID] = useState(null); // NEW: host peer ID state\r\n\r\n  const userVideo = useRef();\r\n  const peersRef = useRef([]);\r\n  const streamRef = useRef();\r\n  const videoRefs = useRef({});\r\n  const screenTrackRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const name = prompt(\"Enter your name\");\r\n    const room = prompt(\"Enter room code\");\r\n    setUserName(name);\r\n    setRoomID(room);\r\n\r\n    navigator.mediaDevices\r\n      .getUserMedia({ video: true, audio: true })\r\n      .then((stream) => {\r\n        streamRef.current = stream;\r\n        if (userVideo.current) {\r\n          userVideo.current.srcObject = stream;\r\n        }\r\n\r\n        socket.emit(\"join-room\", { roomId: room, userName: name });\r\n\r\n        socket.on(\"all-users\", (users) => {\r\n          const newPeers = [];\r\n          users.forEach((user) => {\r\n            if (user.id === socket.id) return;\r\n            const peer = createPeer(user.id, socket.id, stream);\r\n            peersRef.current.push({ peerID: user.id, peer, userName: user.name });\r\n            newPeers.push({ peerID: user.id, peer, userName: user.name });\r\n          });\r\n          setPeers(newPeers);\r\n          setParticipants(users.map((u) => u.name));\r\n\r\n          // Set Host ID as first peer in list (adjust if your host identification differs)\r\n          if (newPeers.length > 0) setHostID(newPeers[0].peerID);\r\n        });\r\n\r\n        socket.on(\"user-joined\", (payload) => {\r\n          const peer = addPeer(payload.signal, payload.id, payload.name, stream);\r\n          peersRef.current.push({ peerID: payload.id, peer, userName: payload.name });\r\n          setPeers((users) => [...users, { peerID: payload.id, peer, userName: payload.name }]);\r\n          setParticipants((list) => {\r\n            if (!list.includes(payload.name)) return [...list, payload.name];\r\n            return list;\r\n          });\r\n        });\r\n\r\n        socket.on(\"receiving-returned-signal\", (payload) => {\r\n          const item = peersRef.current.find((p) => p.peerID === payload.id);\r\n          if (item && item.peer) {\r\n            try {\r\n              item.peer.signal(payload.signal);\r\n            } catch (e) {\r\n              console.warn(\"Signal error caught and ignored:\", e);\r\n            }\r\n          }\r\n        });\r\n\r\n        socket.on(\"user-disconnected\", (id) => {\r\n          setPeers((users) => users.filter((p) => p.peerID !== id));\r\n\r\n          // Safely destroy peer to clean up\r\n          const peerObj = peersRef.current.find((p) => p.peerID === id);\r\n          if (peerObj && peerObj.peer) {\r\n            try {\r\n              peerObj.peer.destroy();\r\n            } catch (e) {\r\n              console.warn(\"Peer destroy error ignored:\", e);\r\n            }\r\n          }\r\n\r\n          peersRef.current = peersRef.current.filter((p) => p.peerID !== id);\r\n          setParticipants(peersRef.current.map((p) => p.userName));\r\n          delete videoRefs.current[id];\r\n          if (screenSharerID === id) setScreenSharerID(null);\r\n          if (hostID === id) setHostID(null); // Clear hostID if host disconnects\r\n        });\r\n\r\n        // Added listener for participant updates\r\n        socket.on(\"update-participants\", (participantsList) => {\r\n          setParticipants(participantsList);\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"Media Device Error:\", err);\r\n        alert(\"Could not access camera/microphone.\");\r\n      });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n      peersRef.current.forEach(({ peer }) => peer.destroy());\r\n      if (streamRef.current) streamRef.current.getTracks().forEach((t) => t.stop());\r\n    };\r\n  }, []);\r\n\r\n  const createPeer = (userToSignal, callerID, stream) => {\r\n    const peer = new Peer({\r\n      initiator: true,\r\n      trickle: false,\r\n      stream,\r\n    });\r\n\r\n    peer.on(\"signal\", (signal) => {\r\n      socket.emit(\"sending-signal\", { userToSignal, callerID, signal });\r\n    });\r\n\r\n    peer.on(\"stream\", (remoteStream) => {\r\n      const videoElem = videoRefs.current[userToSignal];\r\n      if (videoElem) {\r\n        videoElem.srcObject = remoteStream;\r\n      }\r\n\r\n      // FULLSCREEN SHARE MOD: Detect if remote stream is screen share\r\n      const trackLabel = remoteStream.getVideoTracks()?.[0]?.label || \"\";\r\n      if (trackLabel.toLowerCase().includes(\"screen\")) {\r\n        setScreenSharerID(userToSignal);\r\n      }\r\n    });\r\n\r\n    peer.on(\"error\", (err) => console.error(\"Peer error (createPeer):\", err));\r\n    return peer;\r\n  };\r\n\r\n  const addPeer = (incomingSignal, callerId, name, stream) => {\r\n    const peer = new Peer({\r\n      initiator: false,\r\n      trickle: false,\r\n      stream,\r\n    });\r\n\r\n    peer.on(\"signal\", (signal) => {\r\n      socket.emit(\"returning-signal\", { signal, callerID: callerId });\r\n    });\r\n\r\n    peer.on(\"stream\", (remoteStream) => {\r\n      const videoElem = videoRefs.current[callerId];\r\n      if (videoElem) {\r\n        videoElem.srcObject = remoteStream;\r\n      }\r\n\r\n      // FULLSCREEN SHARE MOD: Detect if remote stream is screen share\r\n      const trackLabel = remoteStream.getVideoTracks()?.[0]?.label || \"\";\r\n      if (trackLabel.toLowerCase().includes(\"screen\")) {\r\n        setScreenSharerID(callerId);\r\n      }\r\n    });\r\n\r\n    peer.on(\"error\", (err) => console.error(\"Peer error (addPeer):\", err));\r\n    peer.signal(incomingSignal);\r\n    return peer;\r\n  };\r\n\r\n  const toggleMic = () => {\r\n    if (!streamRef.current) return;\r\n    streamRef.current.getAudioTracks().forEach((track) => (track.enabled = !micOn));\r\n    setMicOn(!micOn);\r\n  };\r\n\r\n  const toggleCam = () => {\r\n    if (!streamRef.current) return;\r\n    streamRef.current.getVideoTracks().forEach((track) => (track.enabled = !camOn));\r\n    setCamOn(!camOn);\r\n  };\r\n\r\n  const toggleScreenShare = async () => {\r\n    if (!isScreenSharing) {\r\n      try {\r\n        const screenStream = await navigator.mediaDevices.getDisplayMedia({ video: true });\r\n        const screenTrack = screenStream.getVideoTracks()[0];\r\n        screenTrackRef.current = screenTrack;\r\n\r\n        Object.values(peersRef.current).forEach(({ peer }) => {\r\n          const sender = peer._pc.getSenders().find((s) => s.track.kind === \"video\");\r\n          if (sender) sender.replaceTrack(screenTrack);\r\n        });\r\n\r\n        if (userVideo.current) userVideo.current.srcObject = screenStream;\r\n        setIsScreenSharing(true);\r\n        screenTrack.onended = stopScreenShare;\r\n      } catch (err) {\r\n        console.error(\"Error sharing screen:\", err);\r\n      }\r\n    } else {\r\n      stopScreenShare();\r\n    }\r\n  };\r\n\r\n  const stopScreenShare = async () => {\r\n    if (screenTrackRef.current) screenTrackRef.current.stop();\r\n    const cameraStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n    streamRef.current = cameraStream;\r\n    Object.values(peersRef.current).forEach(({ peer }) => {\r\n      const sender = peer._pc.getSenders().find((s) => s.track.kind === \"video\");\r\n      if (sender) sender.replaceTrack(cameraStream.getVideoTracks()[0]);\r\n    });\r\n    if (userVideo.current) userVideo.current.srcObject = cameraStream;\r\n    setIsScreenSharing(false);\r\n  };\r\n\r\n  // FULLSCREEN SHARE MOD: Toggle fullscreen on screen share video element\r\n  const toggleFullscreen = () => {\r\n    const screenVideoElem = videoRefs.current[screenSharerID];\r\n    if (!screenVideoElem) return;\r\n\r\n    if (!document.fullscreenElement) {\r\n      screenVideoElem.requestFullscreen().catch((err) => {\r\n        console.error(\"Error enabling fullscreen:\", err);\r\n      });\r\n    } else {\r\n      document.exitFullscreen();\r\n    }\r\n  };\r\n\r\n  // NEW: Toggle fullscreen on Host video block only\r\n  const toggleHostFullscreen = () => {\r\n    if (!hostID) return;\r\n    const hostVideo = videoRefs.current[hostID];\r\n    if (!hostVideo) return;\r\n\r\n    if (!document.fullscreenElement) {\r\n      hostVideo.requestFullscreen().catch((err) => {\r\n        console.error(\"Error enabling fullscreen:\", err);\r\n      });\r\n    } else {\r\n      document.exitFullscreen();\r\n    }\r\n  };\r\n\r\n  const leaveMeeting = () => {\r\n    peersRef.current.forEach(({ peer }) => peer.destroy());\r\n    peersRef.current = [];\r\n    if (streamRef.current) streamRef.current.getTracks().forEach((track) => track.stop());\r\n    socket.disconnect();\r\n    window.location.href = \"/guest\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"guest-room-container\">\r\n      <header className=\"guest-room-header\">\r\n        <h2 className=\"logo\">\r\n          Ve <span className=\"gold\">Meet</span>\r\n        </h2>\r\n        <div>\r\n          <span>Room: {roomID}</span>\r\n          <span className=\"username\">You: {userName}</span>\r\n        </div>\r\n      </header>\r\n\r\n      {/* FULLSCREEN SHARE MOD: Dedicated Screen Share Block */}\r\n      {screenSharerID && (\r\n        <div className=\"screen-share-container\">\r\n          <video\r\n            className=\"screen-share-video\"\r\n            autoPlay\r\n            playsInline\r\n            onClick={toggleFullscreen}\r\n            title=\"Click to toggle fullscreen\"\r\n            ref={(el) => {\r\n              if (el && videoRefs.current[screenSharerID]) {\r\n                el.srcObject = videoRefs.current[screenSharerID].srcObject;\r\n              } else if (el) {\r\n                videoRefs.current[screenSharerID] = el;\r\n              }\r\n            }}\r\n          />\r\n          <div className=\"screen-share-username\">\r\n            {peers.find((p) => p.peerID === screenSharerID)?.userName || \"Presenter\"}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <main className=\"video-grid\">\r\n        <div className={`video-block ${isScreenSharing ? \"fullscreen-video\" : \"\"}`}>\r\n          <video muted ref={userVideo} autoPlay playsInline className=\"video\" />\r\n          {!isScreenSharing && <p>{userName} (You)</p>}\r\n        </div>\r\n\r\n        {peers.map(({ peerID, userName }) => {\r\n          if (peerID === screenSharerID) return null; // skip screen share user video here\r\n\r\n          const isHost = peerID === hostID;\r\n\r\n          return (\r\n            <div className=\"video-block\" key={peerID} style={{ position: \"relative\" }}>\r\n              <video\r\n                playsInline\r\n                autoPlay\r\n                ref={(el) => {\r\n                  if (el) videoRefs.current[peerID] = el;\r\n                  else delete videoRefs.current[peerID];\r\n                }}\r\n                className=\"video\"\r\n              />\r\n              <p>{userName}</p>\r\n\r\n              {userName === \"Chanakya\" && (\r\n                <div className=\"host-video-buttons\">\r\n                  <button className=\"pip-btn\" title=\"Picture in Picture\">ðŸ“º</button>\r\n                  <button className=\"enhance-btn\" title=\"Enhancement\">âœ¨</button>\r\n                  <button\r\n                    onClick={toggleHostFullscreen}\r\n                    title=\"Fullscreen Host Video\"\r\n                    className=\"fullscreen-btn\"\r\n                  >\r\n                    â›¶\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n      </main>\r\n\r\n      <aside className=\"participants-panel\">\r\n        <h3>Participants ({participants.length + 1})</h3>\r\n        <ul>\r\n          <li key={userName + \"-self\"}>{userName} (You)</li>\r\n          {participants.map((pName, idx) => (\r\n            <li key={`${pName}-${idx}`}>{pName}</li>\r\n          ))}\r\n        </ul>\r\n        <div className=\"controls\">\r\n          <button onClick={toggleMic}>{micOn ? \"Mute\" : \"Unmute\"}</button>\r\n          <button onClick={toggleCam}>{camOn ? \"Video Off\" : \"Video On\"}</button>\r\n          <button onClick={toggleScreenShare}>{isScreenSharing ? \"Stop Sharing\" : \"Share Screen\"}</button>\r\n          <button className=\"end-btn\" onClick={leaveMeeting}>Leave Meeting</button>\r\n        </div>\r\n      </aside>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GuestRoom;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}